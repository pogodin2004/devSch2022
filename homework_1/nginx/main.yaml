---
- name: configure webserver 
  hosts: nodes
  vars:
    nginx_port_no_tls: 80
    nginx_port_ssl_manual: 443
    nginx_crt_dir: /etc/ssl/crt
    nginx_key_dir: /etc/ssl/key
    nginx_pem_dir: /etc/ssl/pem
    nginx_crt_file: manual.crt
    nginx_key_file: manual.key
    nginx_pem_file: manual.pem
  tasks:
    - name: create dirs
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0644
      with_items:
      - "{{ nginx_crt_dir }}"
      - "{{ nginx_pem_dir }}"
      - "{{ nginx_key_dir }}"

    - name: copy crt
      copy: 
        src: "{{ nginx_crt_file }}"
        dest: "{{ nginx_crt_dir }}"
        owner: root
        group: root
        mode: 0644

    - name: copy key
      copy: 
        src: "{{ nginx_key_file }}"
        dest: "{{ nginx_key_dir }}"
        owner: root
        group: root
        mode: 0644

    - name: copy pem
      copy: 
        src: "{{ nginx_pem_file }}"
        dest: "{{ nginx_pem_dir }}"
        owner: root
        group: root
        mode: 0644
      
    - name: create nginx repo definition
      copy:
        src: nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        owner: root
        group: root
        mode: 0644

    - name: install nginx
      yum:
        name: nginx
        update_cache: true
        state: present

    - name: copy main nginx config file
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy site's nginx config file
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/sites.conf
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: copy index.html
      template:
        src: templates/index.html.j2
        dest: /usr/share/nginx/html/index.html
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: ensure nginx is enabled and started
      service:
        name: nginx
        state: started
        enabled: true

    - name: insert firewalld rule for nginx no tls
      firewalld:
        port: "{{ nginx_port_no_tls }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

    - name: insert firewalld rule for nginx ssl manual
      firewalld:
        port: "{{ nginx_port_ssl_manual }}/tcp"
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true

  post_tasks:
    - name: check web site from control server no tls
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_no_tls }}"
        return_content: true
      connection: local
      register: example_webpage_out_no_tls
      failed_when: example_webpage_out.status != 200

  post_tasks:
    - name: check web site from control server ssl
      uri:
        url: "http://{{ ansible_host }}:{{ nginx_port_ssl_manual }}"
        return_content: true
      connection: local
      register: example_webpage_out_ssl_manual
      failed_when: example_webpage_out.status != 200

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
